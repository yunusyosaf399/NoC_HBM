Copyright 1986-2022 Xilinx, Inc. All Rights Reserved. Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-----------------------------------------------------------------------------------------------------------------------------------------------
| Tool Version : Vivado v.2024.2 (lin64) Build 5239630 Fri Nov 08 22:34:34 MST 2024
| Date         : Mon May  5 16:44:17 2025
| Host         : younas-Latitude-7280 running 64-bit Ubuntu 20.04.6 LTS
| Command      : report_methodology -file route_report_methodology_0.rpt -pb route_report_methodology_0.pb -rpx route_report_methodology_0.rpx
| Design       : design_1_wrapper
| Device       : xcvh1582-vsva3697-2MP-e-S
| Speed File   : -2MP
| Design State : Fully Routed
-----------------------------------------------------------------------------------------------------------------------------------------------

Report Methodology

Table of Contents
-----------------
1. REPORT SUMMARY
2. REPORT DETAILS

1. REPORT SUMMARY
-----------------
            Netlist: netlist
          Floorplan: design_1
      Design limits: <entire design considered>
             Max checks: <unlimited>
             Checks found: 63
+-----------+------------------+-----------------------------------------------------------+--------+
| Rule      | Severity         | Description                                               | Checks |
+-----------+------------------+-----------------------------------------------------------+--------+
| TIMING-4  | Critical Warning | Invalid primary clock redefinition on a clock tree        | 1      |
| TIMING-27 | Critical Warning | Invalid primary clock on hierarchical pin                 | 1      |
| AVAL-344  | Warning          | Design_needs_USER_RAM_AVERAGE_ACTIVITY_set                | 1      |
| LUTAR-1   | Warning          | LUT drives async reset alert                              | 8      |
| TIMING-9  | Warning          | Unknown CDC Logic                                         | 1      |
| TIMING-10 | Warning          | Missing property on synchronizer                          | 1      |
| XDCB-5    | Warning          | Runtime inefficient way to find pin objects               | 44     |
| CLKC-8    | Advisory         | BUFGCE_DIV with active CE or DIVIDE not 1 has BUFG driver | 4      |
| CLKC-72   | Advisory         | Substitute PLL for MMCME5 check                           | 1      |
| CLKC-75   | Advisory         | MMCME5 with global clock driver has no LOC                | 1      |
+-----------+------------------+-----------------------------------------------------------+--------+

2. REPORT DETAILS
-----------------
TIMING-4#1 Critical Warning
Invalid primary clock redefinition on a clock tree  
Invalid clock redefinition on a clock tree. The primary clock design_1_i/clk_wizard_0/inst/clk_in1 is defined downstream of clock clk_pl_0 and overrides its insertion delay and/or waveform definition
Related violations: <none>

TIMING-27#1 Critical Warning
Invalid primary clock on hierarchical pin  
A primary clock design_1_i/clk_wizard_0/inst/clk_in1 is created on an inappropriate internal pin design_1_i/clk_wizard_0/inst/clk_in1. It is not recommended to create a primary clock on a hierarchical pin when its driver pin has a fanout connected to multiple clock pins
Related violations: <none>

AVAL-344#1 Warning
Design_needs_USER_RAM_AVERAGE_ACTIVITY_set  
The design property USER_RAM_AVERAGE_ACTIVITY on the top-level current_design object is unset (or set to -1).  The estimated RAM_AVERAGE_ACTIVITY used for the design is 3 and assumes a worst-case switching scenario for the URAM and BRAM.  RAM activity directly impacts clock uncertainty and the RAM_AVERAGE_ACTIVITY property may not be accurate for designs that are not final.  It is recommended that the USER_RAM_AVERAGE_ACTIVITY property be specified.  Please refer to the Versal ACAP Clocking Resources Architecture Manual and the Versal ACAP Hardware, IP, and Platform Development Methodology User Guide for more information on specifying the USER_RAM_AVERAGE_ACTIVITY.
Related violations: <none>

LUTAR-1#1 Warning
LUT drives async reset alert  
LUT cell design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_ff1_i_1, with 2 or more inputs, drives asynchronous preset/clear pin(s) design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_ff1_reg/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_10/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_15/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_16/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_17/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_18/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_19/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_3/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_4/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_5/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_6/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_7/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_8/CLR,
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_9/CLR
 (the first 15 of 22 listed). The LUT may glitch and trigger an unexpected reset, even if it is a properly timed path.
Related violations: <none>

LUTAR-1#2 Warning
LUT drives async reset alert  
LUT cell design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_ff1_i_1, with 2 or more inputs, drives asynchronous preset/clear pin(s) design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_ff1_reg/CLR
design_1_i/noc_tg/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_reg/CLR. The LUT may glitch and trigger an unexpected reset, even if it is a properly timed path.
Related violations: <none>

LUTAR-1#3 Warning
LUT drives async reset alert  
LUT cell design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_ff1_i_1, with 2 or more inputs, drives asynchronous preset/clear pin(s) design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_ff1_reg/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_1/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_12/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_13/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_14/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_15/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_16/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_17/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_18/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_19/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_2/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_3/CLR,
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_4/CLR
 (the first 15 of 24 listed). The LUT may glitch and trigger an unexpected reset, even if it is a properly timed path.
Related violations: <none>

LUTAR-1#4 Warning
LUT drives async reset alert  
LUT cell design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_ff1_i_1, with 2 or more inputs, drives asynchronous preset/clear pin(s) design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_ff1_reg/CLR
design_1_i/noc_tg_1/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_reg/CLR. The LUT may glitch and trigger an unexpected reset, even if it is a properly timed path.
Related violations: <none>

LUTAR-1#5 Warning
LUT drives async reset alert  
LUT cell design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_ff1_i_1, with 2 or more inputs, drives asynchronous preset/clear pin(s) design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_ff1_reg/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_1/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_10/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_11/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_12/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_13/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_14/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_15/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_16/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_2/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_3/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_8/CLR,
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_9/CLR
 (the first 15 of 24 listed). The LUT may glitch and trigger an unexpected reset, even if it is a properly timed path.
Related violations: <none>

LUTAR-1#6 Warning
LUT drives async reset alert  
LUT cell design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_ff1_i_1, with 2 or more inputs, drives asynchronous preset/clear pin(s) design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_ff1_reg/CLR
design_1_i/noc_tg_2/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_reg/CLR. The LUT may glitch and trigger an unexpected reset, even if it is a properly timed path.
Related violations: <none>

LUTAR-1#7 Warning
LUT drives async reset alert  
LUT cell design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_ff1_i_1, with 2 or more inputs, drives asynchronous preset/clear pin(s) design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_ff1_reg/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_1/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_19/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_2/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_20/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_21/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_3/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_4/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_5/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_6/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_7/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_8/CLR,
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_aclk_reg_replica_9/CLR
 (the first 15 of 21 listed). The LUT may glitch and trigger an unexpected reset, even if it is a properly timed path.
Related violations: <none>

LUTAR-1#8 Warning
LUT drives async reset alert  
LUT cell design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_ff1_i_1, with 2 or more inputs, drives asynchronous preset/clear pin(s) design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_ff1_reg/CLR
design_1_i/noc_tg_3/inst/u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/combrstn_t_pclk_reg/CLR. The LUT may glitch and trigger an unexpected reset, even if it is a properly timed path.
Related violations: <none>

TIMING-9#1 Warning
Unknown CDC Logic  
One or more asynchronous Clock Domain Crossing has been detected between 2 clock domains through a set_false_path or a set_clock_groups or set_max_delay -datapath_only constraint but no double-registers logic synchronizer has been found on the side of the capture clock. It is recommended to run report_cdc for a complete and detailed CDC coverage. Please consider using XPM_CDC to avoid Critical severities
Related violations: <none>

TIMING-10#1 Warning
Missing property on synchronizer  
One or more logic synchronizer has been detected between 2 clock domains but the synchronizer does not have the property ASYNC_REG defined on one or both registers. It is recommended to run report_cdc for a complete and detailed CDC coverage
Related violations: <none>

XDCB-5#1 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */sim_trig_inst/u_synchronizer_1/SYNC[0].sync_reg_reg[0]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '83' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_sim_trig_0/hdl/par/design_1_noc_sim_trig_0_ip.xdc (Line: 7)
Related violations: <none>

XDCB-5#2 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */sim_trig_inst/u_synchronizer_1/SYNC[1].sync_reg_reg[0]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '84' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_sim_trig_0/hdl/par/design_1_noc_sim_trig_0_ip.xdc (Line: 8)
Related violations: <none>

XDCB-5#3 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */sim_trig_inst/u_synchronizer_1/SYNC[2].sync_reg_reg[0]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '85' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_sim_trig_0/hdl/par/design_1_noc_sim_trig_0_ip.xdc (Line: 9)
Related violations: <none>

XDCB-5#4 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */sim_trig_inst/u_synchronizer_1/SYNC[3].sync_reg_reg[0]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '86' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_sim_trig_0/hdl/par/design_1_noc_sim_trig_0_ip.xdc (Line: 10)
Related violations: <none>

XDCB-5#5 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_*/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '110' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_3_0/hdl/par/design_1_noc_tg_3_0_ip.xdc (Line: 13)
Related violations: <none>

XDCB-5#6 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_*/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '74' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_0/hdl/par/design_1_noc_tg_0_ip.xdc (Line: 13)
Related violations: <none>

XDCB-5#7 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_*/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '88' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_1_0/hdl/par/design_1_noc_tg_1_0_ip.xdc (Line: 13)
Related violations: <none>

XDCB-5#8 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_*/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '98' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_2_0/hdl/par/design_1_noc_tg_2_0_ip.xdc (Line: 13)
Related violations: <none>

XDCB-5#9 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_soft_resetn_sl_aclk_reg/CLR}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '111' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_3_0/hdl/par/design_1_noc_tg_3_0_ip.xdc (Line: 14)
Related violations: <none>

XDCB-5#10 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_soft_resetn_sl_aclk_reg/CLR}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '75' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_0/hdl/par/design_1_noc_tg_0_ip.xdc (Line: 14)
Related violations: <none>

XDCB-5#11 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_soft_resetn_sl_aclk_reg/CLR}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '89' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_1_0/hdl/par/design_1_noc_tg_1_0_ip.xdc (Line: 14)
Related violations: <none>

XDCB-5#12 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_soft_resetn_sl_aclk_reg/CLR}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '99' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_2_0/hdl/par/design_1_noc_tg_2_0_ip.xdc (Line: 14)
Related violations: <none>

XDCB-5#13 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_soft_resetn_sl_ff_reg/CLR}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '100' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_2_0/hdl/par/design_1_noc_tg_2_0_ip.xdc (Line: 15)
Related violations: <none>

XDCB-5#14 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_soft_resetn_sl_ff_reg/CLR}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '112' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_3_0/hdl/par/design_1_noc_tg_3_0_ip.xdc (Line: 15)
Related violations: <none>

XDCB-5#15 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_soft_resetn_sl_ff_reg/CLR}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '76' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_0/hdl/par/design_1_noc_tg_0_ip.xdc (Line: 15)
Related violations: <none>

XDCB-5#16 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/cdc_soft_resetn_sl_ff_reg/CLR}]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '90' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_1_0/hdl/par/design_1_noc_tg_1_0_ip.xdc (Line: 15)
Related violations: <none>

XDCB-5#17 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/extrst_n_aclk_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '105' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_2_0/hdl/par/design_1_noc_tg_2_0_ip.xdc (Line: 31)
Related violations: <none>

XDCB-5#18 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/extrst_n_aclk_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '117' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_3_0/hdl/par/design_1_noc_tg_3_0_ip.xdc (Line: 31)
Related violations: <none>

XDCB-5#19 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/extrst_n_aclk_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '81' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_0/hdl/par/design_1_noc_tg_0_ip.xdc (Line: 31)
Related violations: <none>

XDCB-5#20 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/extrst_n_aclk_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '95' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_1_0/hdl/par/design_1_noc_tg_1_0_ip.xdc (Line: 31)
Related violations: <none>

XDCB-5#21 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/extrst_n_pclk_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '103' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_2_0/hdl/par/design_1_noc_tg_2_0_ip.xdc (Line: 29)
Related violations: <none>

XDCB-5#22 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/extrst_n_pclk_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '115' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_3_0/hdl/par/design_1_noc_tg_3_0_ip.xdc (Line: 29)
Related violations: <none>

XDCB-5#23 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/extrst_n_pclk_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '79' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_0/hdl/par/design_1_noc_tg_0_ip.xdc (Line: 29)
Related violations: <none>

XDCB-5#24 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/extrst_n_pclk_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '93' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_1_0/hdl/par/design_1_noc_tg_1_0_ip.xdc (Line: 29)
Related violations: <none>

XDCB-5#25 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rdata_reg[*]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '109' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_3_0/hdl/par/design_1_noc_tg_3_0_ip.xdc (Line: 12)
Related violations: <none>

XDCB-5#26 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rdata_reg[*]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '73' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_0/hdl/par/design_1_noc_tg_0_ip.xdc (Line: 12)
Related violations: <none>

XDCB-5#27 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rdata_reg[*]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '87' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_1_0/hdl/par/design_1_noc_tg_1_0_ip.xdc (Line: 12)
Related violations: <none>

XDCB-5#28 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rdata_reg[*]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '97' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_2_0/hdl/par/design_1_noc_tg_2_0_ip.xdc (Line: 12)
Related violations: <none>

XDCB-5#29 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rst_n_ff1_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '106' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_2_0/hdl/par/design_1_noc_tg_2_0_ip.xdc (Line: 32)
Related violations: <none>

XDCB-5#30 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rst_n_ff1_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '118' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_3_0/hdl/par/design_1_noc_tg_3_0_ip.xdc (Line: 32)
Related violations: <none>

XDCB-5#31 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rst_n_ff1_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '82' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_0/hdl/par/design_1_noc_tg_0_ip.xdc (Line: 32)
Related violations: <none>

XDCB-5#32 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rst_n_ff1_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '96' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_1_0/hdl/par/design_1_noc_tg_1_0_ip.xdc (Line: 32)
Related violations: <none>

XDCB-5#33 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rst_n_ff2_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '104' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_2_0/hdl/par/design_1_noc_tg_2_0_ip.xdc (Line: 30)
Related violations: <none>

XDCB-5#34 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rst_n_ff2_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '116' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_3_0/hdl/par/design_1_noc_tg_3_0_ip.xdc (Line: 30)
Related violations: <none>

XDCB-5#35 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rst_n_ff2_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '80' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_0/hdl/par/design_1_noc_tg_0_ip.xdc (Line: 30)
Related violations: <none>

XDCB-5#36 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/rst_n_ff2_reg/CLR }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '94' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_1_0/hdl/par/design_1_noc_tg_1_0_ip.xdc (Line: 30)
Related violations: <none>

XDCB-5#37 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/tg_start_in_aclk_ff1_reg/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '102' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_2_0/hdl/par/design_1_noc_tg_2_0_ip.xdc (Line: 28)
Related violations: <none>

XDCB-5#38 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/tg_start_in_aclk_ff1_reg/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '114' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_3_0/hdl/par/design_1_noc_tg_3_0_ip.xdc (Line: 28)
Related violations: <none>

XDCB-5#39 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/tg_start_in_aclk_ff1_reg/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '78' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_0/hdl/par/design_1_noc_tg_0_ip.xdc (Line: 28)
Related violations: <none>

XDCB-5#40 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/gen_aximm_reg_space.u_reg_space/tg_start_in_aclk_ff1_reg/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '92' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_1_0/hdl/par/design_1_noc_tg_1_0_ip.xdc (Line: 28)
Related violations: <none>

XDCB-5#41 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/trig_in_out_sync_inst/u_synchronizer/SYNC[0].sync_reg_reg[0]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '101' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_2_0/hdl/par/design_1_noc_tg_2_0_ip.xdc (Line: 23)
Related violations: <none>

XDCB-5#42 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/trig_in_out_sync_inst/u_synchronizer/SYNC[0].sync_reg_reg[0]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '113' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_3_0/hdl/par/design_1_noc_tg_3_0_ip.xdc (Line: 23)
Related violations: <none>

XDCB-5#43 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/trig_in_out_sync_inst/u_synchronizer/SYNC[0].sync_reg_reg[0]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '77' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_0/hdl/par/design_1_noc_tg_0_ip.xdc (Line: 23)
Related violations: <none>

XDCB-5#44 Warning
Runtime inefficient way to find pin objects  
The option '-to : [get_pins -hierarchical -filter { NAME =~  */u_top_axi_mst/u_tg_top/trig_in_out_sync_inst/u_synchronizer/SYNC[0].sync_reg_reg[0]/D }]' of constraint 'set_false_path' uses inefficient query to find pin objects (see constraint position '91' in the Timing Constraint window in Vivado IDE). To reduce runtime, it is recommended to get the pins through the cell objects. Please refer to Using Constraints Guide (Constraints Efficiency). An example of optimal query is: get_pins -filter {REF_PIN_NAME=~yy*} -of_objects [get_cells -hierarchical xx*].
Current XDC: /home/younas/Documents/Vivado/hbm_module_2_synth_impl/hbm_module_2_synth_impl.gen/sources_1/bd/design_1/ip/design_1_noc_tg_1_0/hdl/par/design_1_noc_tg_1_0_ip.xdc (Line: 23)
Related violations: <none>

CLKC-8#1 Advisory
BUFGCE_DIV with active CE or DIVIDE not 1 has BUFG driver  
The BUFGCE_DIV cell design_1_i/noc_tg/inst/u_tg_PCLK design_1_i/noc_tg/inst/u_tg_PCLK/I pin (and CE is ACTIVE or BUFGCE_DIVIDE is not 1) is driven by BUFGCE clock buffer design_1_i/clk_wizard_0/inst/clock_primitive_inst/BUFG_clkout1_inst. It should be reconnected in parallel to the driving clock buffer in order to reduce skew. Cascaded buffers introduce skew that can lead to difficult or impossible timing closure.
Related violations: <none>

CLKC-8#2 Advisory
BUFGCE_DIV with active CE or DIVIDE not 1 has BUFG driver  
The BUFGCE_DIV cell design_1_i/noc_tg_1/inst/u_tg_PCLK design_1_i/noc_tg_1/inst/u_tg_PCLK/I pin (and CE is ACTIVE or BUFGCE_DIVIDE is not 1) is driven by BUFGCE clock buffer design_1_i/clk_wizard_0/inst/clock_primitive_inst/BUFG_clkout1_inst. It should be reconnected in parallel to the driving clock buffer in order to reduce skew. Cascaded buffers introduce skew that can lead to difficult or impossible timing closure.
Related violations: <none>

CLKC-8#3 Advisory
BUFGCE_DIV with active CE or DIVIDE not 1 has BUFG driver  
The BUFGCE_DIV cell design_1_i/noc_tg_2/inst/u_tg_PCLK design_1_i/noc_tg_2/inst/u_tg_PCLK/I pin (and CE is ACTIVE or BUFGCE_DIVIDE is not 1) is driven by BUFGCE clock buffer design_1_i/clk_wizard_0/inst/clock_primitive_inst/BUFG_clkout1_inst. It should be reconnected in parallel to the driving clock buffer in order to reduce skew. Cascaded buffers introduce skew that can lead to difficult or impossible timing closure.
Related violations: <none>

CLKC-8#4 Advisory
BUFGCE_DIV with active CE or DIVIDE not 1 has BUFG driver  
The BUFGCE_DIV cell design_1_i/noc_tg_3/inst/u_tg_PCLK design_1_i/noc_tg_3/inst/u_tg_PCLK/I pin (and CE is ACTIVE or BUFGCE_DIVIDE is not 1) is driven by BUFGCE clock buffer design_1_i/clk_wizard_0/inst/clock_primitive_inst/BUFG_clkout1_inst. It should be reconnected in parallel to the driving clock buffer in order to reduce skew. Cascaded buffers introduce skew that can lead to difficult or impossible timing closure.
Related violations: <none>

CLKC-72#1 Advisory
Substitute PLL for MMCME5 check  
The MMCME5 cell design_1_i/clk_wizard_0/inst/clock_primitive_inst/MMCME5_inst has a single input clock whose source driver, UNKNOWN, is not optimally located and the MMCM has a configuration which could be accommodated by a PLL.  Consider changing the MMCM to a PLL which could align better with the input clock driver.
Related violations: <none>

CLKC-75#1 Advisory
MMCME5 with global clock driver has no LOC  
The MMCME5 cell design_1_i/clk_wizard_0/inst/clock_primitive_inst/MMCME5_inst CLKIN1 or CLKIN2 pin is driven by global Clock buffer(s) design_1_i/versal_cips_0/inst/pspmc_0/inst/buffer_pl_clk_0.PL_CLK_0_BUFG and does not have a LOC constraint. It is recommended to LOC the MMCM and use the CLOCK_DEDICATED_ROUTE constraint on the net(s) driven by the global Clock buffer(s).
Related violations: <none>


